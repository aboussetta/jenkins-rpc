---
# - name: Setup .ssh
#   tags: keys
#   file: dest={{ansible_env.HOME}}/.ssh mode=0700 state=directory
#
# - name: Clear trusted keys
#   tags: keys
#   shell: echo > {{ansible_env.HOME}}/.ssh/authorized_keys
#
# - name: Upload SSH keys
#   tags: keys
#   copy: src={{item|basename}} dest={{ansible_env.HOME}}/.ssh/{{item|basename}} mode=0600
#   with_fileglob: id_*
#
# - name: Trust keys
#   tags: keys
#   shell: cat {{ansible_env.HOME}}/.ssh/{{item|basename}} >> {{ansible_env.HOME}}/.ssh/authorized_keys
#   with_fileglob: id_*.pub
#
- name: Authorize SSH keys
  tags: keys
  authorized_key: key="{{lookup('file', item|basename)}}" user=root state=present
  with_fileglob: id_*.pub

# - name: Updating packages
#   tags: packages
#   yum: name=* state=latest
#   when: ansible_os_family == "RedHat"

# - name: Install python-apt if missing
#   tags: packages
#   command: apt-get -y install python-apt # Can't use apt module to install this
#   when: ansible_os_family == "Debian"

- name: Updating packages
  tags: packages
  apt: update_cache=yes upgrade=dist
#  when: ansible_os_family == "Debian"

#- name: Disable postfix
#  tags: services
#  service: name=postfix state=stopped enabled=no
#  when: ansible_os_family == "RedHat"

# - name: Clear existing cluster hosts
#   tags: hosts
#   host: hostname={{inventory_hostname}} state=absent
#   register: result
#   until: not result.changed
#   retries: 10
#   delay: 0
#
# - name: Add cluster hosts svc nets
#   tags: hosts
#   host: hostname={{item}} ip={{hostvars[item].ifaces.mgmt.ipv4}} state=present
#   when: "'mgmt' in hostvars[item].ifaces"
#   with_items: groups.hosts
#
# - name: Add docker registry to hosts
#   tags: hosts
#   host: hostname=registry.docker ip=10.208.163.157 state=present

# - name: Configure network interfaces
#   tags: networks
#   template: src=ifcfg.j2 dest=/etc/sysconfig/network-scripts/ifcfg-{{item.iface}}
#   when: item.iface in ansible_interfaces and ansible_os_family == "RedHat"
#   with_items: ifaces.values()
#   changed_when: True
#   notify:
#   - Down interfaces
#   - Flush interfaces
#   - Up interfaces
#   - Ping addresses

- name: Configure network interfaces
  tags: networks
  interfaces: name={{item.iface}} state=present addr_family=inet {% if 'ipv4' in item %}iface_type=static address={{item.ipv4}} netmask={{item.mask}}{% else %}iface_type=manual updown='up ip link set $IFACE up','down ip link set $IFACE down'{% endif %}
  when: item.iface in ansible_interfaces
#and ansible_os_family == "Debian"
  with_items: ifaces.values()
  notify:
  - Down interfaces
  - Flush interfaces
  - Up interfaces
  - Ping addresses
