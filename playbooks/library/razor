#!/usr/bin/env python
# Copyright 2014, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pypi imports
import requests

# ansible imports
from ansible.module_utils.basic import *

DOCUMENTATION = '''
---
module: razor
short_description:
    - Manage razor server and nodes
description:
    - This module uses razor to manage a cluster of servers
version_added: "1.6.2"
author: Solomon Wagner
requirements:
    - "razor-server"
    - "python-requests"
options:
    return_code:
        description:
            - Allow for return codes other than 0 when executing commands
            - This is a comma seperated list of acceptable return codes
        default: 0
    url:
        description:
            - the full url for the razor api
        required: True
        default: http://localhost:8080/api
    command:
        description:
            - Operation for the module to perform, Currently available
        choices:
            - reinstall-node
    name:
        description:
            - Name of the node in razor
'''

EXAMPLES = """
# Get the list of nodes
- razor:
    url: http://localhost:8080/api
    command: list-nodes

# Issue reinstall node command
- razor:
    url: http://razor:8080/api
    command: reinstall-node
    name: node01
"""

COMMAND_MAP = {
    'list-brokers': {
        'command': 'list_brokers',
        'extension': '/collections/brokers',
        'variables': None
    },
    'list-commands': {
        'command': '',
        'extension': '/collections/commands',
        'variables': None
    },
    'list-events': {
        'command': '',
        'extension': '/collections/events',
        'variables': None
    },
    'list-hooks': {
        'command': '',
        'extension': '/collections/hooks',
        'variables': None
    },
    'list-nodes': {
        'command': 'list_nodes',
        'extension': '/collections/nodes',
        'variables': None
    },
    'list-policies': {
        'command': '',
        'extension': '/collections/policies',
        'variables': None
    },
    'list-repos': {
        'command': '',
        'extension': '/collections/repos',
        'variables': None
    },
    'list-tags': {
        'command': '',
        'extension': '/collections/tags',
        'variables': None
    },
    'get-broker': {
        'command': '',
        'extension': '/collections/brokers/%(name)s',
        'variables': [
            'name'
        ]
    },
    'get-command': {
        'command': '',
        'extension': '/collections/command/%(name)s',
        'variables': [
            'name'
        ]
    },
    'get-event': {
        'command': '',
        'extension': '/collections/event/%(name)s',
        'variables': [
            'name'
        ]
    },
    'get-hook': {
        'command': '',
        'extension': '/collections/hook/%(name)s',
        'variables': [
            'name'
        ]
    },
    'get-node': {
        'command': '',
        'extension': '/collections/node/%(name)s',
        'variables': [
            'name'
        ]
    },
    'get-policy': {
        'command': '',
        'extension': '/collections/policies/%(name)s',
        'variables': [
            'name'
        ]
    },
    'get-repo': {
        'command': '',
        'extension': '/collections/repos/%(name)s',
        'variables': [
            'name'
        ]
    },
    'get-tag': {
        'command': '',
        'extension': '/collections/tags/%(name)s',
        'variables': [
            'name'
        ]
    },
    'get-task': {
        'command': '',
        'extension': '/collections/tasks/%(name)s',
        'variables': [
            'name'
        ]
    },
    'add-policy-tag': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name',
            'tag',
            'rule'
        ]
    },
    'create-broker': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name',
            'broker-type',
            'configuration'
        ]
    },
    'create-hook': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name',
            'hook-type',
            'configuration'
        ]
    },
    'create-policy': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name',
            'hostname',
            'root-password',
            'enabled',
            'max-count',
            'before',
            'after',
            'tags',
            'repo',
            'broker',
            'task',
            'node-metadata'
        ]
    },
    'create-repo': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name',
            'url',
            'iso-url',
            'no-content',
            'task'
        ]
    },
    'create-tag': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name',
            'rule'
        ]
    },
    'create-task': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name',
            'os',
            'template',
            'boot-seq'
        ]
    },
    'delete-broker': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name'
        ]
    },
    'delete-hook': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name'
        ]
    },
    'delete-node': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name'
        ]
    },
    'delete-policy': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name'
        ]
    },
    'delete-repo': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name'
        ]
    },
    'delete-tag': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name',
            'force'
        ]
    },
    'disable-policy': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name'
        ]
    },
    'enable-policy': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name'
        ]
    },
    'modify-node-metadata': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'node',
            'update',
            'remove',
            'clear',
            'no-replace'
        ]
    },
    'modify-policy-max-count': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name',
            'max-count'
        ]
    },
    'move-policy': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name',
            'before',
            'after'
        ]
    },
    'reboot-node': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name'
        ]
    },
    'register-node': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'installed',
            'hw-info'
        ]
    },
    'reinstall-node': {
        'command': 'reinstall_node',
        'extension': '/commands/reinstall-node',
        'variables': {
            'name': True
        }
    },
    'remove-node-metadata': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'node',
            'key',
            'all'
        ]
    },
    'remove-policy-tag': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name',
            'tag'
        ]
    },
    'set-node-desired-power-state': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name',
            'to'
        ]
    },
    'set-node-hw-info': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'node',
            'hw-info'
        ]
    },
    'set-node-ipmi-credentials': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name',
            'ipmi-hostname',
            'ipmi-username',
            'ipmi-password'
        ]
    },
    'update-node-metadata': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'node',
            'key',
            'value',
            'no-replace'
        ]
    },
    'update-tag-rule': {
        'command': '',
        'extension': '/commands/%(command)s',
        'variables': [
            'name',
            'rule',
            'force'
        ]
    }
}


class ManageRazor(object):

    def __init__(self, module):
        """ Manage Razor via Ansible """
        self.state_change = False
        self.url = module.params['url']

        # Load Ansible Module
        self.module = module

    @staticmethod
    def _facts(facts):
        """Return a dict for our Ansible facts.

        :param facts: ``dict``  Dict with data to return
        """
        return {'razor_facts': facts}

    def _get_vars(self, variables, required=None):
        """Return a dict of all variables as found within the module.

        :param variables: ``list``  List of all variables that are
                                    available to use within the
                                    Razor Command.
        :param required: ``list``  Name of variables that are required.
        """
        return_dict = {}
        for variable in variables:
            return_dict[variable] = self.module.params.get(variable)
        else:
            if isinstance(required, list):
                for var_name in required:
                    check = return_dict.get(var_name)
                    if check is None:
                        self.failure(
                            error='Missing [ %s ] from Task or found a'
                                  'None value' % var_name,
                            rc=000,
                            msg='variables %s - available params [ %s ]'
                                % (variables, self.module.params)
                        )
            return return_dict

    def failure(self, error, rc, msg):
        """Return a Failure when running an Ansible command.

        :param error: ``str``  Error that occurred.
        :param rc: ``int``     Return code while executing an Ansible command.
        :param msg: ``str``    Message to report.
        """
        self.module.fail_json(msg=msg, rc=rc, err=error)

    def command_router(self):
        """ Run the command as its provided to the module """
        command_name = self.module.params['command']

        # check to mae sure the command exists
        if command_name not in COMMAND_MAP:
            self.failure(
                error='No Command Found',
                rc=2,
                msg='Command [ %s ] was not found.' % command_name
                )

        action_command = COMMAND_MAP[command_name]['command']
        if hasattr(self, '%s' % action_command):

            # Gather variables / extension for command
            variables_dict = COMMAND_MAP[command_name]['variables']
            variables = []
            required_vars = []
            if variables_dict is not None:
                # save the variable keys as a list of variables
                variables = COMMAND_MAP[command_name]['variables'].keys()
                for key, value in variables_dict.iteritems():
                    if value is True:
                        required_vars.append(key)

            # grab api extension to run against
            extension = COMMAND_MAP[command_name]['extension']

            # get action and run
            action = getattr(self, '%s' % action_command)
            facts = action(extension=extension,
                           variables=variables,
                           required_vars=required_vars)

            # check return
            if facts is None:
                self.module.exit_json(changed=self.state_change)
            else:
                self.module.exit_json(
                    changed=self.state_change,
                    ansible_facts=facts
                )
        else:
            self.failure(
                error='Command not in ManageRazor class',
                rc=2,
                msg='Method [ %s ] was not found.' % command_name
            )

    def list_brokers(self, extension, variables=None, required_vars=None):
        """ Lists all available brokers

        This will return 'None' if no brokers are found.

        :param extension: ``String``   Url extension to execute
        :param variables: ``List``  List of all variablesthat are available
                                    with the Razor command.
        :param required_vars: ``List``  List of razor command
                                        required variables
        """

        # issue api request
        r = requests.get(
            '%(url)s%(extension)s' % dict(url=self.url, extension=extension)
        )

        print r.json()
        return None

    def list_nodes(self, extension, variables=None, required_vars=None):
        """ Lists all available nodes

        This will return 'None' if no nodes are found.

        :param extension: ``String``   Url extension to execute
        :param variables: ``List``  List of all variablesthat are available
                                    with the Razor command.
        :param required_vars: ``List``  List of razor command
                                        required variables
        """

        # issue api request
        r = requests.get(
            "%(url)s%(extension)s" % dict(url=self.url, extension=extension)
        )

        if r.status_code == requests.codes.ok:
            return r.json()
        return None

    def reinstall_node(self, extension, variables, required_vars):
        """Issues a reinstall node command

        This will return 'None' if the node is not found.

        :param variables: ``list``  List of all variables that are available
                                    with the Razor command.
        :param required_vars: ``list``  List of all required variables for the
                                        Razor command.
        """
        # build out variables body
        url = '%(url)s%(extension)s' % dict(url=self.url, extension=extension)
        payload = self._get_vars(variables, required=required_vars)
        headers = {'content-type': 'application/json'}

        # return json.dumps(payload)

        # issue api request
        r = requests.post(url, data=json.dumps(payload), headers=headers)

        # add return value work here
        if r.status_code == requests.codes.ok:
            return r.json()
        else:
            self.failure(
                error='Bad Request',
                rc=2,
                msg=r.json()['error']
            )


def main():
    module = AnsibleModule(
        argument_spec=dict(
            command=dict(
                required=True,
                choices=COMMAND_MAP.keys()
            ),
            url=dict(
                required=True
            ),
            return_code=dict(
                type='str',
                default=0
            ),
            name=dict(
                required=False
            )
        ),
        supports_check_mode=False
    )

    mr = ManageRazor(module=module)
    return_code = module.params.get('return_code', '').split(',')
    module.params['return_code'] = return_code
    mr.command_router()

if __name__ == '__main__':
        main()
